ARG COMPOSER_VERSION="2"
ARG PHP_VERSION="8.0-fpm-bullseye"

# Composer version to make available in built image
FROM composer:${COMPOSER_VERSION} AS composer-image

# PHP version to actually build
FROM php:${PHP_VERSION} AS base

# Bash as default shell should exit on non-zero exit-codes in piped commands
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

COPY scripts/docker-apt-clean-install /usr/local/sbin/
ENV PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

ENV DEBIAN_FRONTEND=noninteractive

# Install software available by default in this image
# hadolint ignore=DL3008,DL3009
RUN docker-apt-clean-install \
        calendar \
        git \
        wget \
        gnupg2 \
        libbz2-dev \
        libfreetype6-dev \
        libjpeg62-turbo-dev \
        libicu-dev \
        libjpeg-dev \
        libpng-dev \
        libwebp-dev \
        libxml2-dev \
        libzip-dev \
        locales \
        msmtp \
        tzdata \
        unzip \
        zlib1g-dev \
        zip \
    && echo "tzdata tzdata/Areas select Europe" | debconf-set-selections \
    && echo "tzdata tzdata/Zones/Europe select Berlin" | debconf-set-selections \
    && rm -f /etc/localtime /etc/timezone \
    && dpkg-reconfigure -f noninteractive tzdata

ENV TZ=Europe/Berlin

# Configure and install PHP extensions
RUN docker-php-ext-configure calendar \
    && docker-php-ext-configure gd \
    && docker-php-ext-configure intl --enable-intl \
    && docker-php-ext-install -j"$(nproc)" \
        bcmath \
        bz2 \
        calendar \
        gd \
        gettext \
        intl \
        opcache \
        pdo_mysql \
        soap \
        zip \
    && rm -rf /usr/src/

FROM base as dev

# Install xdebug â€“ it is not enabled by default though, you need to add the following line to your php.ini file:
# zend_extension="/usr/local/php/modules/xdebug.so"
ARG XDEBUG_VERSION="xdebug"
RUN pecl install ${XDEBUG_VERSION}

# Put composer into image
COPY --from=composer-image /usr/bin/composer /usr/bin/composer
ENV COMPOSER_NO_INTERACTION=1
ENV COMPOSER_HOME=/tmp/composer

# Add locale de_DE.UTF-8
RUN echo "de_DE.UTF-8 UTF-8" >> /etc/locale.gen && locale-gen

# Add current node version
RUN docker-node-install node_18.x

# Define the build stage
FROM dev as build
COPY --chown=1000:1000 . /build
ARG MODULE
WORKDIR /build/${MODULE}

USER 1000:1000
RUN make live

# Final stage
ARG PHP_VERSION
FROM base as final
RUN docker-apt-clean-install libfcgi-bin
ARG MODULE
COPY --from=build --chown=0:0 /build/${MODULE} /var/www/html
