name: unit tests

on:
  workflow_call:
    outputs:
      module-test-result:
        description: "Module test result"
        value: ${{ jobs.module-test.outputs.result }}
      zmsapi-test-result:
        description: "ZMSAPI test result"
        value: ${{ jobs.zmsapi-test.outputs.result }}
      zmsdb-test-result:
        description: "ZMSDB test result"
        value: ${{ jobs.zmsdb-test.outputs.result }}
      zmsclient-test-result:
        description: "ZMSClient test result"
        value: ${{ jobs.zmsclient-test.outputs.result }}

jobs:
  module-test:
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/it-at-m/eappointment-php-base:${{ matrix.php_version }}-dev"
      env:
        XDEBUG_MODE: coverage
        PHP_INI_SCAN_DIR: "/usr/local/etc/php/conf.d:/tmp/php/conf.d"
    outputs:
      result: ${{ steps.set-result.outputs.result }}
    steps:
      - uses: actions/checkout@main
      
      - name: Configure PHP
        run: |
          mkdir -p /tmp/php/conf.d
          echo "zend_extension=xdebug.so" > /tmp/php/conf.d/xdebug.ini
          echo "xdebug.mode=coverage" >> /tmp/php/conf.d/xdebug.ini
          echo "xdebug.start_with_request=yes" >> /tmp/php/conf.d/xdebug.ini

      - name: Install Composer Dependencies
        run: |
          set -e
          cd "${{ matrix.module }}"
          composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Run Unit Tests with Coverage
        env:
          XDEBUG_MODE: coverage
        run: |
          set -e  # Exit immediately on any error
          cd "${{ matrix.module }}"
          mkdir -p coverage
          echo "Running tests for ${{ matrix.module }}"
          
          # Handle zmsslim's missing phpunit.xml
          if [ "${{ matrix.module }}" = "zmsslim" ] && [ ! -f "phpunit.xml" ] && [ -f "phpunit.xml.dist" ]; then
            cp phpunit.xml.dist phpunit.xml
          fi

          # Handle mellon missing phpunit.xml
          if [ "${{ matrix.module }}" = "mellon" ] && [ ! -f "phpunit.xml" ] && [ -f "phpunit.xml.dist" ]; then
            cp phpunit.xml.dist phpunit.xml
          fi
          
          # Run all modules with coverage
          echo "Running tests WITH coverage for ${{ matrix.module }}"
          php -dmemory_limit=-1 ./vendor/bin/phpunit -c phpunit.xml \
            --coverage-html coverage/html \
            --coverage-clover coverage/clover.xml \
            --log-junit coverage/junit.xml \
            --display-deprecations --display-warnings --fail-on-deprecation

      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.module }}
          path: ${{ matrix.module }}/coverage/
          retention-days: 1

      - name: Set job result
        id: set-result
        if: always()
        run: echo "result=${{ job.status }}" >> $GITHUB_OUTPUT

    strategy:
      fail-fast: false
      matrix:
        include:
          - module: mellon
            php_version: "8.3"      
          - module: zmsadmin
            php_version: "8.3"
          - module: zmscalldisplay
            php_version: "8.3"
          - module: zmscitizenapi
            php_version: "8.3"
          - module: zmsdldb
            php_version: "8.3"
          - module: zmsentities
            php_version: "8.3"
          - module: zmsmessaging
            php_version: "8.3"
          - module: zmsslim
            php_version: "8.3"
          - module: zmsstatistic
            php_version: "8.3"
          - module: zmsticketprinter
            php_version: "8.3"

  zmsapi-test:
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/it-at-m/eappointment-php-base:8.3-dev"
    services:
      mariadb:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: zmsapi
          MYSQL_DATABASE: zmsbo
          MYSQL_CHARACTER_SET: utf8mb4
          MYSQL_COLLATION: utf8mb4_unicode_ci
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 5
          --memory=1g
          --cpus=1
    steps:
      - name: Checkout GitHub Action
        uses: actions/checkout@main
      - name: Install python3
        run: |
          apt update
          apt install -y python3 python3-click python3-git jq
      - name: Cache Third-Party Dependencies
        id: cache-composer-api
        uses: actions/cache@v4
        with:
          path: |
            zmsapi/vendor-cache
            zmsdb/vendor-cache
          key: ${{ runner.os }}-composer-api-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-api-

      - name: Restore Third-Party Dependencies
        if: steps.cache-composer-api.outputs.cache-hit == 'true'
        run: |
          echo "Restoring cached third-party dependencies..."
          modules=('zmsapi' 'zmsdb')
          for module in "${modules[@]}"; do
            if [ -d "$module/vendor-cache" ]; then
              echo "Restoring $module third-party dependencies"
              mkdir -p "$module/vendor"
              # Copy only third-party packages, exclude eappointment
              find "$module/vendor-cache" -maxdepth 1 -type d ! -name "vendor-cache" -exec cp -r {} "$module/vendor/" \; 2>/dev/null || true
            fi
          done
        shell: bash

      - name: Referencing local Modules and Libraries
        run: |
          echo "Setting up module references..."
          # Update composer.json for zmsapi and zmsdb to reference local eappointment modules
          modules=('zmsapi' 'zmsdb')
          for module in "${modules[@]}"; do
            echo "Updating $module composer.json..."
            # Update eappointment dependencies to @dev
            jq '.require = (.require | to_entries | map(if .key | startswith("eappointment/") then .value = "@dev" else . end) | from_entries)' "$module/composer.json" > "$module/composer.json.tmp" && mv "$module/composer.json.tmp" "$module/composer.json"
          done
          echo "Module references completed"
        shell: bash

      - name: Install Composer Dependencies
        run: |
          modules=('zmsapi' 'zmsdb')
          for module in "${modules[@]}"; do
            echo "Installing Composer dependencies for $module"
            (cd "$module" && composer install --no-progress --prefer-dist --optimize-autoloader)
          done
        shell: bash

      - name: Cache Third-Party Dependencies
        if: steps.cache-composer-api.outputs.cache-hit != 'true'
        run: |
          echo "Caching third-party dependencies..."
          modules=('zmsapi' 'zmsdb')
          for module in "${modules[@]}"; do
            echo "Caching $module third-party dependencies"
            mkdir -p "$module/vendor-cache"
            # Copy only third-party packages, exclude eappointment
            if [ -d "$module/vendor" ]; then
              find "$module/vendor" -maxdepth 1 -type d ! -name "eappointment" ! -name "vendor" -exec cp -r {} "$module/vendor-cache/" \; 2>/dev/null || true
            fi
          done
        shell: bash

      - name: Cache Hit Notification
        if: steps.cache-composer-api.outputs.cache-hit == 'true'
        run: |
          echo "ðŸš€ CACHE HIT! Third-party dependencies are cached"
          echo "âœ… Third-party dependencies cached - composer install will be faster"
          echo "ðŸ“¦ Using cached third-party packages from previous run"
      - name: Import Test Data and Run Unit Tests
        env:
          MYSQL_PORT: "tcp://mariadb:3306"
          MYSQL_DATABASE: zmsbo
          MYSQL_ROOT_PASSWORD: zmsapi
          ZMS_CONFIG_SECURE_TOKEN: secure-token
        run: |
          set -e  # Exit immediately on any error
          cd zmsapi
          echo "Setup fixtures..."
          rm -rf data
          ln -s vendor/eappointment/zmsdb/tests/Zmsdb/fixtures data
          echo "Importing test data..."
          # Ensure config file is available for importTestData
          if [ ! -f config.php ]; then
            cp config.example.php config.php
          fi
          vendor/bin/importTestData --commit
          mkdir -p coverage
          echo "Running tests with coverage"
          
          php -dzend_extension=xdebug.so -dxdebug.mode=coverage -dmemory_limit=2G -dopcache.enable=1 -dopcache.memory_consumption=128 \
            ./vendor/bin/phpunit -c phpunit.xml \
            --coverage-html coverage/html \
            --coverage-clover coverage/clover.xml \
            --log-junit coverage/junit.xml \
            --display-deprecations --display-warnings --fail-on-deprecation
      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-zmsapi
          path: zmsapi/coverage/
          retention-days: 1
      - name: Set job result
        id: set-result
        if: always()
        run: echo "result=${{ job.status }}" >> $GITHUB_OUTPUT

  zmsdb-test:
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/it-at-m/eappointment-php-base:8.3-dev"
    services:
      mariadb:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: zmsdb
          MYSQL_DATABASE: zmsbo
          MYSQL_CHARACTER_SET: utf8mb4
          MYSQL_COLLATION: utf8mb4_unicode_ci
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 5
          --memory=1g
          --cpus=1
    steps:
      - name: Checkout GitHub Action
        uses: actions/checkout@main
      - name: Install python3
        run: |
          apt update
          apt install -y python3 python3-click python3-git jq
      - name: Cache Third-Party Dependencies
        id: cache-composer-db
        uses: actions/cache@v4
        with:
          path: |
            zmsdb/vendor-cache
          key: ${{ runner.os }}-composer-db-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-db-

      - name: Restore Third-Party Dependencies
        if: steps.cache-composer-db.outputs.cache-hit == 'true'
        run: |
          echo "Restoring cached third-party dependencies..."
          if [ -d "zmsdb/vendor-cache" ]; then
            echo "Restoring zmsdb third-party dependencies"
            mkdir -p "zmsdb/vendor"
            # Copy only third-party packages, exclude eappointment
            find "zmsdb/vendor-cache" -maxdepth 1 -type d ! -name "vendor-cache" -exec cp -r {} "zmsdb/vendor/" \; 2>/dev/null || true
          fi
        shell: bash

      - name: Referencing local Modules and Libraries
        run: |
          echo "Setting up module references..."
          # Update composer.json for zmsdb to reference local eappointment modules
          echo "Updating zmsdb composer.json..."
          # Add local repository references
          jq '.repositories = (.repositories // []) | map(select(.type != "path" or .url != "../*")) | . + [{"type": "path", "url": "../*", "options": {"symlink": false}}]' "zmsdb/composer.json" > "zmsdb/composer.json.tmp" && mv "zmsdb/composer.json.tmp" "zmsdb/composer.json"
          # Update eappointment dependencies to @dev
          jq '.require = (.require | to_entries | map(if .key | startswith("eappointment/") then .value = "@dev" else . end) | from_entries)' "zmsdb/composer.json" > "zmsdb/composer.json.tmp" && mv "zmsdb/composer.json.tmp" "zmsdb/composer.json"
          echo "Module references completed"
        shell: bash

      - name: Install Composer Dependencies
        run: |
          modules=('zmsdb')
          for module in "${modules[@]}"; do
            echo "Installing Composer dependencies for $module"
            (cd "$module" && composer install --no-progress --prefer-dist --optimize-autoloader)
          done
        shell: bash

      - name: Cache Third-Party Dependencies
        if: steps.cache-composer-db.outputs.cache-hit != 'true'
        run: |
          echo "Caching third-party dependencies..."
          echo "Caching zmsdb third-party dependencies"
          mkdir -p "zmsdb/vendor-cache"
          # Copy only third-party packages, exclude eappointment
          if [ -d "zmsdb/vendor" ]; then
            find "zmsdb/vendor" -maxdepth 1 -type d ! -name "eappointment" ! -name "vendor" -exec cp -r {} "zmsdb/vendor-cache/" \; 2>/dev/null || true
          fi
        shell: bash

      - name: Cache Hit Notification
        if: steps.cache-composer-db.outputs.cache-hit == 'true'
        run: |
          echo "ðŸš€ CACHE HIT! Third-party dependencies are cached"
          echo "âœ… Third-party dependencies cached - composer install will be faster"
          echo "ðŸ“¦ Using cached third-party packages from previous run"
      - name: Import Test Data and Run Unit Tests
        env:
          MYSQL_PORT: "tcp://mariadb:3306"
          MYSQL_DATABASE: zmsbo
          MYSQL_ROOT_PASSWORD: zmsdb
          XDEBUG_MODE: coverage
        run: |
          set -e  # Exit immediately on any error
          cd zmsdb
          # Ensure config file is available for importTestData
          if [ ! -f config.php ]; then
            cp config.example.php config.php
          fi
          bin/importTestData --commit
          mkdir -p coverage
          echo "Running tests with coverage"
          php -i | grep -i xdebug
          
          php -dzend_extension=xdebug.so -dxdebug.mode=coverage -dmemory_limit=2G -dopcache.enable=1 -dopcache.memory_consumption=128 \
            ./vendor/bin/phpunit -c phpunit.xml \
            --coverage-html coverage/html \
            --coverage-clover coverage/clover.xml \
            --log-junit coverage/junit.xml \
            --display-deprecations --display-warnings --fail-on-deprecation
      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-zmsdb
          path: zmsdb/coverage/
          retention-days: 1
      - name: Set job result
        id: set-result
        if: always()
        run: echo "result=${{ job.status }}" >> $GITHUB_OUTPUT

  zmsclient-test:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.set-result.outputs.result }}
    steps:
      - name: Checkout GitHub Action
        uses: actions/checkout@main

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php_version: "8.3"
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql
          coverage: xdebug

      - name: Install Composer Dependencies
        run: |
          modules=('zmsclient')
          for module in "${modules[@]}"; do
            echo "Installing Composer dependencies for $module"
            (cd "$module" && composer install --no-progress --prefer-dist --optimize-autoloader)
          done
        shell: bash

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Run Unit Tests
        run: |
          set -e  # Exit immediately on any error
          cd ./zmsclient
          mkdir -p coverage
          docker-compose up -d
          
          echo "Running tests WITH coverage for zmsclient"
          docker-compose exec -T test php -dmemory_limit=-1 \
            ./vendor/bin/phpunit \
            --coverage-html coverage/html \
            --coverage-clover coverage/clover.xml \
            --log-junit coverage/junit.xml \
            --display-deprecations --display-warnings --fail-on-deprecation
      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-zmsclient
          path: zmsclient/coverage/
          retention-days: 1

      - name: Set job result
        id: set-result
        if: always()
        run: echo "result=${{ job.status }}" >> $GITHUB_OUTPUT
