name: Generate Schema Diagrams

on:
  workflow_call:
    outputs:
      diagrams_artifact:
        description: 'Name of the generated diagrams artifact'
        value: 'schema-diagrams'

permissions:
  contents: read

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create public directory
        run: mkdir -p public/diagrams

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install jsonschema jinja2

      - name: Create schema converter script
        run: |
          cat > convert_schema.py <<'EOL'
          import json
          import os
          from pathlib import Path
          from jsonschema import validators
          from typing import Dict, Any, Set, Union, List, Tuple
          from jinja2 import Template

          def sanitize_name(name: str, prefix: str = '') -> str:
              """Sanitize name for Mermaid compatibility."""
              name = name.replace('-', '_').replace(' ', '_')
              return f"{prefix}_{name}" if prefix else f"c_{name}"

          def get_type_name(type_def: Union[str, list, dict]) -> str:
              """Convert JSON Schema type to Mermaid type."""
              if isinstance(type_def, list):
                  return 'any'
              if isinstance(type_def, dict):
                  return type_def.get('type', 'any')
              return type_def

          def load_all_schemas() -> List[Tuple[str, Dict[str, Any], str]]:
              """Load all schema files with their prefixes."""
              schemas = []
              
              # Load main schemas
              main_dir = Path('zmsentities/schema')
              if main_dir.exists():
                  for file in main_dir.glob('*.json'):
                      with open(file) as f:
                          schemas.append((file.stem, json.load(f), ''))
              
              # Load citizen schemas
              citizen_dir = Path('zmsentities/schema/citizenapi')
              if citizen_dir.exists():
                  for file in citizen_dir.glob('*.json'):
                      with open(file) as f:
                          schemas.append((file.stem, json.load(f), 'citizen'))
              
              return schemas

          def convert_schemas_to_mermaid(schemas: List[Tuple[str, Dict[str, Any], str]], prefix_filter: str = None) -> str:
              """Convert schemas to a Mermaid diagram, optionally filtering by prefix."""
              # Filter schemas if prefix is provided
              if prefix_filter is not None:
                  schemas = [(name, schema, prefix) for name, schema, prefix in schemas if prefix == prefix_filter]
              
              classes = []
              relationships = []
              processed = set()
              schema_classes = {}  # Map schema names to their class names

              def process_schema(schema: Dict[str, Any], class_name: str) -> None:
                  if class_name in processed:
                      return
                  processed.add(class_name)
                  
                  class_def = [f'class {class_name} {{\n']
                  properties = schema.get('properties', {})
                  required = schema.get('required', [])
                  
                  if not properties:
                      class_def.append('    +any _empty\n')
                  
                  for prop_name, prop_schema in properties.items():
                      prop_type = get_type_name(prop_schema.get('type', 'any'))
                      is_required = prop_name in required
                      
                      # Check for references to other schemas
                      ref = prop_schema.get('$ref', '')
                      if ref:
                          ref_name = ref.split('/')[-1].replace('.json', '')
                          if ref_name in schema_classes:
                              relationships.append(f'{class_name} --> {schema_classes[ref_name]}')
                              class_def.append(f'    +{schema_classes[ref_name]} {prop_name}{"" if is_required else "?"}\n')
                              continue
                      
                      if prop_type == 'array':
                          items = prop_schema.get('items', {})
                          item_ref = items.get('$ref', '')
                          if item_ref:
                              ref_name = item_ref.split('/')[-1].replace('.json', '')
                              if ref_name in schema_classes:
                                  relationships.append(f'{class_name} --> "*" {schema_classes[ref_name]}')
                                  class_def.append(f'    +{schema_classes[ref_name]}[] {prop_name}{"" if is_required else "?"}\n')
                                  continue
                          
                          if items.get('type') == 'object':
                              item_class_name = f'{class_name}_{sanitize_name(prop_name)}_Item'
                              relationships.append(f'{class_name} --> "*" {item_class_name}')
                              process_schema(items, item_class_name)
                              class_def.append(f'    +{item_class_name}[] {prop_name}{"" if is_required else "?"}\n')
                          else:
                              item_type = get_type_name(items.get('type', 'any'))
                              class_def.append(f'    +{item_type}[] {prop_name}{"" if is_required else "?"}\n')
                      elif prop_type == 'object':
                          nested_class_name = f'{class_name}_{sanitize_name(prop_name)}'
                          relationships.append(f'{class_name} --> {nested_class_name}')
                          process_schema(prop_schema, nested_class_name)
                          class_def.append(f'    +{nested_class_name} {prop_name}{"" if is_required else "?"}\n')
                      else:
                          class_def.append(f'    +{prop_type} {prop_name}{"" if is_required else "?"}\n')
                  
                  class_def.append('}\n\n')
                  classes.append(''.join(class_def))

              # First pass: collect all schema class names
              for name, schema, prefix in schemas:
                  class_name = sanitize_name(name, prefix)
                  schema_classes[name] = class_name

              # Second pass: process all schemas
              for name, schema, prefix in schemas:
                  class_name = schema_classes[name]
                  process_schema(schema, class_name)

              # Combine all elements
              mermaid = ['classDiagram\n']
              mermaid.extend(classes)
              mermaid.extend(f'{r}\n' for r in relationships)
              
              return ''.join(mermaid)

          def create_diagram_page(title: str, mermaid: str) -> str:
              """Create HTML page with diagram."""
              template = Template("""<!DOCTYPE html>
          <html>
              <head>
                  <title>{{ title }}</title>
                  <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
                  <script>
                      mermaid.initialize({
                          startOnLoad: true,
                          securityLevel: 'loose',
                          logLevel: 'debug',
                          maxTextSize: 900000,
                          theme: 'default',
                          flowchart: {
                              useMaxWidth: false,
                              htmlLabels: true,
                              padding: 20
                          },
                          class: {
                              padding: 20,
                              useMaxWidth: true,
                              labelSpacing: 10,
                              defaultRenderer: 'dagre',
                              curve: 'basis',
                              nodeSpacing: 100,
                              rankSpacing: 100,
                              fontSize: 14
                          }
                      });
                  </script>
                  <style>
                      body {
                          font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
                          line-height: 1.6;
                          margin: 0;
                          padding: 0;
                          height: 100vh;
                          display: flex;
                          flex-direction: column;
                      }
                      h1 {
                          margin: 0;
                          padding: 1rem;
                          background: #f6f8fa;
                          border-bottom: 1px solid #eaecef;
                      }
                      .diagram-container {
                          flex: 1;
                          position: relative;
                          overflow: hidden;
                      }
                      .diagram {
                          position: absolute;
                          top: 50%;
                          left: 50%;
                          transform: translate(-50%, -50%) scale(0.6);
                          transform-origin: center center;
                          cursor: grab;
                          min-width: 100%;
                          min-height: 100%;
                      }
                      .diagram:active {
                          cursor: grabbing;
                      }
                      .controls {
                          position: fixed;
                          top: 1rem;
                          right: 1rem;
                          background: white;
                          padding: 1rem;
                          border: 1px solid #eaecef;
                          border-radius: 6px;
                          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                          z-index: 1000;
                      }
                      #zoom-level {
                          margin-left: 1rem;
                      }
                      .nav {
                          padding: 0.5rem 1rem;
                          background: #f6f8fa;
                          border-bottom: 1px solid #eaecef;
                      }
                      .nav a {
                          margin-right: 1rem;
                          color: #0366d6;
                          text-decoration: none;
                      }
                      .nav a:hover {
                          text-decoration: underline;
                      }
                      .mermaid {
                          font-size: 14px;
                          line-height: 1.8;
                      }
                      .mermaid .node rect {
                          padding: 20px;
                      }
                      .mermaid .node .label-container {
                          line-height: 2;
                      }
                      .mermaid .node text {
                          font-size: 14px !important;
                          line-height: 1.8 !important;
                      }
                      .mermaid .node .label {
                          padding: 10px;
                      }
                      .mermaid .node .label foreignObject {
                          overflow: visible;
                      }
                      .mermaid .node .label div {
                          white-space: nowrap;
                          line-height: 2 !important;
                          padding: 4px 0;
                      }
                  </style>
              </head>
              <body>
                  <h1>{{ title }}</h1>
                  <div class="nav">
                      <a href="zmsapi.html">ZMS API Schema</a>
                      <a href="zmscitizenapi.html">ZMS Citizen API Schema</a>
                      <!--<a href="index.html">Combined View</a>-->
                  </div>
                  
                  <div class="controls">
                      <button onclick="zoomIn()">Zoom In</button>
                      <button onclick="zoomOut()">Zoom Out</button>
                      <button onclick="resetZoom()">Reset</button>
                      <span id="zoom-level">90%</span>
                  </div>
                  
                  <div class="diagram-container">
                      <div class="diagram">
                          <pre class="mermaid">{{ mermaid }}</pre>
                      </div>
                  </div>

                  <script>
                      let zoom = 0.6;
                      let offsetX = 0;
                      let offsetY = 0;
                      let isDragging = false;
                      let startX = 0;
                      let startY = 0;
                      
                      const container = document.querySelector('.diagram-container');
                      const diagram = document.querySelector('.diagram');
                      const zoomLevel = document.getElementById('zoom-level');
                      
                      function updateTransform() {
                          diagram.style.transform = `translate(calc(-50% + ${offsetX}px), calc(-50% + ${offsetY}px)) scale(${zoom})`;
                          zoomLevel.textContent = Math.round(zoom * 100) + '%';
                      }
                      
                      function zoomIn() {
                          zoom *= 1.5;
                          updateTransform();
                      }
                      
                      function zoomOut() {
                          zoom = Math.max(0.1, zoom / 1.5);
                          updateTransform();
                      }
                      
                      function resetZoom() {
                          zoom = 0.6;
                          offsetX = 0;
                          offsetY = 0;
                          updateTransform();
                      }
                      
                      diagram.addEventListener('mousedown', (e) => {
                          isDragging = true;
                          startX = e.clientX - offsetX;
                          startY = e.clientY - offsetY;
                          diagram.style.cursor = 'grabbing';
                      });
                      
                      document.addEventListener('mousemove', (e) => {
                          if (!isDragging) return;
                          offsetX = e.clientX - startX;
                          offsetY = e.clientY - startY;
                          updateTransform();
                      });
                      
                      document.addEventListener('mouseup', () => {
                          isDragging = false;
                          diagram.style.cursor = 'grab';
                      });
                      
                      container.addEventListener('wheel', (e) => {
                          e.preventDefault();
                          const rect = container.getBoundingClientRect();
                          const x = e.clientX - rect.left;
                          const y = e.clientY - rect.top;
                          
                          const mouseX = (x - offsetX) / zoom;
                          const mouseY = (y - offsetY) / zoom;
                          
                          if (e.deltaY < 0) {
                              zoom *= 1.1;
                          } else {
                              zoom = Math.max(0.1, zoom / 1.1);
                          }
                          
                          offsetX = x - mouseX * zoom;
                          offsetY = y - mouseY * zoom;
                          
                          updateTransform();
                      });
                  </script>
              </body>
          </html>""")
              return template.render(title=title, mermaid=mermaid)

          if __name__ == '__main__':
              print("Starting schema conversion...")
              diagrams_dir = Path('public/diagrams')
              diagrams_dir.mkdir(parents=True, exist_ok=True)
              
              # Load all schemas
              schemas = load_all_schemas()
              
              # Generate separate diagrams
              zmsapi_mermaid = convert_schemas_to_mermaid(schemas, prefix_filter='')
              zmscitizenapi_mermaid = convert_schemas_to_mermaid(schemas, prefix_filter='citizen')
              combined_mermaid = convert_schemas_to_mermaid(schemas)
              
              # Create pages
              diagrams_dir.joinpath('zmsapi.html').write_text(
                  create_diagram_page('ZMS API Schema', zmsapi_mermaid)
              )
              diagrams_dir.joinpath('zmscitizenapi.html').write_text(
                  create_diagram_page('ZMS Citizen API Schema', zmscitizenapi_mermaid)
              )
              diagrams_dir.joinpath('index.html').write_text(
                  create_diagram_page('Combined API Schemas', combined_mermaid)
              )
              
              print("Schema conversion complete")
          EOL

      - name: Generate schema diagrams and pages
        run: python convert_schema.py

      - name: Upload diagrams artifact
        uses: actions/upload-artifact@v4
        with:
          name: schema-diagrams
          path: public/diagrams/
          retention-days: 1