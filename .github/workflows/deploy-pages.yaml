name: Deploy to GitHub Pages

on:
  workflow_call:
    inputs:
      coverage_artifact:
        description: 'Name of the coverage reports artifact'
        required: true
        type: string
        default: 'coverage-reports'
      api_docs_artifact:
        description: 'Name of the API documentation artifact'
        required: true
        type: string
        default: 'api-docs'
      security_artifact:
        description: 'Name of the security reports artifact'
        required: true
        type: string
        default: 'security-reports'

permissions:
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create public directory
        run: mkdir -p public/diagrams

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install jsonschema

      - name: Create schema converter script
        run: |
          cat > convert_schema.py <<'EOL'
          import json
          import os
          from pathlib import Path
          from jsonschema import validators
          from typing import Dict, Any, Set

          def sanitize_name(name: str) -> str:
              """Sanitize name for Mermaid compatibility."""
              return name.replace('-', '_').replace(' ', '_')

          def convert_to_mermaid(schema: Dict[str, Any], root_name: str) -> str:
              """Convert JSON Schema to Mermaid class diagram."""
              classes = []
              relationships = []
              processed = set()  # Track processed schemas to avoid duplicates

              def process_schema(schema: Dict[str, Any], class_name: str) -> None:
                  """Process a schema object and its properties."""
                  if class_name in processed:
                      return
                  processed.add(class_name)
                  
                  # Start class definition
                  class_def = [f'class {class_name} {{']
                  
                  # Process properties
                  properties = schema.get('properties', {})
                  required = schema.get('required', [])
                  
                  for prop_name, prop_schema in properties.items():
                      prop_type = prop_schema.get('type', 'any')
                      is_required = prop_name in required
                      
                      # Handle different property types
                      if prop_type == 'array':
                          items = prop_schema.get('items', {})
                          if items.get('type') == 'object':
                              # Create a new class for array items
                              item_class_name = f'{class_name}_{sanitize_name(prop_name)}_Item'
                              relationships.append(f'{class_name} --> "*" {item_class_name}')
                              process_schema(items, item_class_name)
                              class_def.append(f'    +{item_class_name}[] {prop_name}{"" if is_required else "?"}')
                          else:
                              item_type = items.get('type', 'any')
                              class_def.append(f'    +{item_type}[] {prop_name}{"" if is_required else "?"}')
                      elif prop_type == 'object':
                          # Create a new class for nested objects
                          nested_class_name = f'{class_name}_{sanitize_name(prop_name)}'
                          relationships.append(f'{class_name} --> {nested_class_name}')
                          process_schema(prop_schema, nested_class_name)
                          class_def.append(f'    +{nested_class_name} {prop_name}{"" if is_required else "?"}')
                      else:
                          class_def.append(f'    +{prop_type} {prop_name}{"" if is_required else "?"}')
                  
                  class_def.append('}')
                  classes.append('\n'.join(class_def))

              # Start processing from root
              process_schema(schema, root_name)
              
              # Combine all elements
              mermaid = ['classDiagram']
              mermaid.extend(classes)
              mermaid.extend(relationships)
              
              return '\n'.join(mermaid)

          def create_html_page(diagrams_dir: Path) -> str:
              """Create HTML page with Mermaid diagrams."""
              html = """<!DOCTYPE html>
          <html>
            <head>
              <title>API Schema Class Diagrams</title>
              <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
              <script>
                mermaid.initialize({ startOnLoad: true, theme: 'default' });
              </script>
              <style>
                body {
                  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
                  line-height: 1.6;
                  padding: 2rem;
                }
                .diagram {
                  margin: 2rem 0;
                  padding: 1rem;
                  border: 1px solid #eaecef;
                  border-radius: 6px;
                }
                pre.mermaid {
                  background: #f6f8fa;
                  padding: 1rem;
                }
              </style>
            </head>
            <body>
              <h1>API Schema Class Diagrams</h1>
              
              <h2>Main API Schema</h2>
              <div id="main-schemas">
          """
              
              # Add main schema diagrams
              for file in sorted(diagrams_dir.glob('*.mmd')):
                  if not file.name.startswith('citizen_'):
                      html += f"""
                <div class="diagram">
                  <h3>{file.stem}</h3>
                  <pre class="mermaid">
          {file.read_text().strip()}
                  </pre>
                </div>
          """
              
              html += """
              </div>

              <h2>Citizen API Schema</h2>
              <div id="citizen-schemas">
          """
              
              # Add citizen schema diagrams
              for file in sorted(diagrams_dir.glob('citizen_*.mmd')):
                  html += f"""
                <div class="diagram">
                  <h3>{file.stem.replace('citizen_', '')}</h3>
                  <pre class="mermaid">
          {file.read_text().strip()}
                  </pre>
                </div>
          """
              
              html += """
              </div>
            </body>
          </html>
          """
              return html

          def process_schema_files(directory: str, prefix: str = '') -> None:
              """Process all JSON Schema files in a directory."""
              diagrams_dir = Path('public/diagrams')
              diagrams_dir.mkdir(parents=True, exist_ok=True)
              
              for file in Path(directory).glob('*.json'):
                  try:
                      # Load and validate schema
                      with open(file) as f:
                          schema = json.load(f)
                      
                      # Validate schema
                      validators.Draft7Validator.check_schema(schema)
                      
                      # Convert to Mermaid
                      mermaid = convert_to_mermaid(schema, sanitize_name(file.stem))
                      
                      # Save diagram
                      output_path = diagrams_dir / f'{prefix}{file.stem}.mmd'
                      output_path.write_text(mermaid)
                      print(f'Successfully processed {file}')
                  except Exception as e:
                      print(f'Error processing {file}: {e}')
              
              # Create index page
              index_path = diagrams_dir / 'index.html'
              index_path.write_text(create_html_page(diagrams_dir))

          # Process main API schema
          process_schema_files('zmsentities/schema')
          # Process citizen API schema
          process_schema_files('zmsentities/schema/citizenapi', 'citizen_')
          EOL

      - name: Generate schema diagrams
        run: python convert_schema.py

      - name: Test individual diagrams
        run: |
          # Enable debug mode for Mermaid
          mkdir -p public/diagrams/debug
          
          # Function to create test HTML
          create_test_html() {
            local file=$1
            local basename=$(basename "$file" .mmd)
            echo "=== Testing diagram: $basename ==="
            echo "=== Content of $file ==="
            cat "$file"
            echo "=== Generating test HTML ==="
            
            cat > "public/diagrams/debug/${basename}_test.html" <<EOL
          <!DOCTYPE html>
          <html>
            <head>
              <title>Test: ${basename}</title>
              <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
              <script>
                mermaid.initialize({
                  startOnLoad: true,
                  securityLevel: 'loose',
                  logLevel: 'debug',
                  theme: 'default'
                });
              </script>
            </head>
            <body>
              <h3>Diagram: ${basename}</h3>
              <pre class="mermaid">
          $(cat "$file")
              </pre>
              <div id="debug"></div>
              <script>
                // Log any Mermaid errors
                window.onerror = function(msg, url, lineNo, columnNo, error) {
                  document.getElementById('debug').innerHTML += '<pre>' + msg + '</pre>';
                  return false;
                };
              </script>
            </body>
          </html>
          EOL
          }
          
          # Test main schema diagrams
          echo "=== Testing main schema diagrams ==="
          for f in public/diagrams/*.mmd; do
            if [[ ! $f =~ citizen_ ]]; then
              create_test_html "$f"
            fi
          done
          
          # Test citizen schema diagrams
          echo "=== Testing citizen schema diagrams ==="
          for f in public/diagrams/citizen_*.mmd; do
            create_test_html "$f"
          done
          
          # List generated test files
          echo "=== Generated test files ==="
          ls -l public/diagrams/debug/


      - name: Create diagrams index page
        run: |
          # Create diagrams index page
          cat > public/diagrams/index.html <<EOL
          <!DOCTYPE html>
          <html>
            <head>
              <title>API Schema Class Diagrams</title>
              <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
              <script>
                mermaid.initialize({ startOnLoad: true });
              </script>
              <style>
                body {
                  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
                  line-height: 1.6;
                  padding: 2rem;
                }
                .diagram {
                  margin: 2rem 0;
                  padding: 1rem;
                  border: 1px solid #eaecef;
                  border-radius: 6px;
                }
              </style>
            </head>
            <body>
              <h1>API Schema Class Diagrams</h1>
              
              <h2>Main API Schema</h2>
              <div id="main-schemas">
          EOL

          # Add main schema diagrams
          for f in public/diagrams/*.mmd; do
            if [[ ! $f =~ citizen_ ]]; then
              echo "<div class='diagram'>" >> public/diagrams/index.html
              echo "<h3>$(basename "$f" .mmd)</h3>" >> public/diagrams/index.html
              echo "<pre class='mermaid'>" >> public/diagrams/index.html
              cat "$f" >> public/diagrams/index.html
              echo "</pre>" >> public/diagrams/index.html
              echo "</div>" >> public/diagrams/index.html
            fi
          done

          # Add citizen schema section
          cat >> public/diagrams/index.html <<EOL
              </div>

              <h2>Citizen API Schema</h2>
              <div id="citizen-schemas">
          EOL

          # Add citizen schema diagrams
          for f in public/diagrams/citizen_*.mmd; do
            echo "<div class='diagram'>" >> public/diagrams/index.html
            echo "<h3>$(basename "$f" .mmd | sed 's/citizen_//')</h3>" >> public/diagrams/index.html
            echo "<pre class='mermaid'>" >> public/diagrams/index.html
            cat "$f" >> public/diagrams/index.html
            echo "</pre>" >> public/diagrams/index.html
            echo "</div>" >> public/diagrams/index.html
          done

          # Close HTML
          cat >> public/diagrams/index.html <<EOL
              </div>
            </body>
          </html>
          EOL



      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.coverage_artifact }}
          path: public

      - name: Download API docs
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.api_docs_artifact }}
          path: public

      - name: Download security reports
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.security_artifact }}
          path: public

      - name: Debug - List directory structure
        run: |
          echo "=== Directory Structure ==="
          ls -R public/

      - name: Create index page
        run: |
          cat > public/index.html <<'EOL'
          <!DOCTYPE html>
          <html>
            <head>
              <title>eAppointment Documentation</title>
              <style>
                :root {
                  --primary: #0366d6;
                  --bg: #ffffff;
                  --text: #24292e;
                }
                body {
                  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
                  line-height: 1.6;
                  color: var(--text);
                  max-width: 1200px;
                  margin: 0 auto;
                  padding: 2rem;
                  background: var(--bg);
                }
                h1, h2 {
                  border-bottom: 1px solid #eaecef;
                  padding-bottom: 0.3em;
                }
                .grid {
                  display: grid;
                  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                  gap: 2rem;
                  margin: 2rem 0;
                }
                .card {
                  background: #f6f8fa;
                  border-radius: 6px;
                  padding: 1.5rem;
                }
                .card h2 {
                  margin-top: 0;
                }
                ul {
                  list-style-type: none;
                  padding: 0;
                }
                li {
                  margin: 0.5rem 0;
                }
                a {
                  color: var(--primary);
                  text-decoration: none;
                }
                a:hover {
                  text-decoration: underline;
                }
              </style>
              <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
              <script>
                mermaid.initialize({ startOnLoad: true });
              </script>
            </head>
            <body>
              <h1>ZMS eAppointment Technical Documentation</h1>
              
              <div class="grid">
                <div class="card">
                  <h2>API Documentation</h2>
                  <ul>
                    <li><a href="https://it-at-m.github.io/eappointment/zmscitizenapi/public/doc/index.html">Zmscitizenapi API Documentation</a></li>
                    <li><a href="https://it-at-m.github.io/eappointment/zmsapi/public/doc/index.html">Zmsapi Documentation</a></li>
                  </ul>
                </div>

                <div class="card">
                  <h2>Schema Diagrams</h2>
                  <ul>
                    <li><a href="diagrams/index.html">API Schema Class Diagrams</a></li>
                  </ul>
                </div>

                <div class="card">
                  <h2>Code Test Coverage Reports</h2>
                  <ul>
                    <li><a href="coverage/coverage-zmsadmin/html/">Zmsadmin Coverage</a></li>
                    <li><a href="coverage/coverage-zmscalldisplay/html/">Zmscalldisplay Coverage</a></li>
                    <li><a href="coverage/coverage-zmscitizenapi/html/">Zmscitizenapi Coverage</a></li>
                    <li><a href="coverage/coverage-zmsdldb/html/">Zmsdldb Coverage</a></li>
                    <li><a href="coverage/coverage-zmsentities/html/">Zmsentities Coverage</a></li>
                    <li><a href="coverage/coverage-zmsmessaging/html/">Zmsmessaging Coverage</a></li>
                    <li><a href="coverage/coverage-zmsslim/html/">Zmsslim Coverage</a></li>
                    <li><a href="coverage/coverage-zmsstatistic/html/">Zmsstatistic Coverage</a></li>
                    <li><a href="coverage/coverage-zmsticketprinter/html/">Zmsticketprinter Coverage</a></li>
                    <li><a href="coverage/coverage-zmsapi/html/">Zmsapi Coverage</a></li>
                    <li><a href="coverage/coverage-zmsdb/html/">Zmsdb Coverage</a></li>
                    <li><a href="coverage/coverage-zmsclient/html/">Zmsclient Coverage</a></li>
                  </ul>
                </div>

                <div class="card">
                  <h2>OWASP Security Reports</h2>
                  <ul>
                    <li><a href="security/security-report-zmsadmin/dependency-check-report.html">Zmsadmin Security Report</a></li>
                    <li><a href="security/security-report-zmscalldisplay/dependency-check-report.html">Zmscalldisplay Security Report</a></li>
                    <li><a href="security/security-report-zmscitizenapi/dependency-check-report.html">Zmscitizenapi Security Report</a></li>
                    <li><a href="security/security-report-zmsdldb/dependency-check-report.html">Zmsdldb Security Report</a></li>
                    <li><a href="security/security-report-zmsentities/dependency-check-report.html">Zmsentities Security Report</a></li>
                    <li><a href="security/security-report-zmsmessaging/dependency-check-report.html">Zmsmessaging Security Report</a></li>
                    <li><a href="security/security-report-zmsslim/dependency-check-report.html">Zmsslim Security Report</a></li>
                    <li><a href="security/security-report-zmsstatistic/dependency-check-report.html">Zmsstatistic Security Report</a></li>
                    <li><a href="security/security-report-zmsticketprinter/dependency-check-report.html">Zmsticketprinter Security Report</a></li>
                    <li><a href="security/security-report-zmsapi/dependency-check-report.html">Zmsapi Security Report</a></li>
                    <li><a href="security/security-report-zmsdb/dependency-check-report.html">Zmsdb Security Report</a></li>
                    <li><a href="security/security-report-zmsclient/dependency-check-report.html">Zmsclient Security Report</a></li>
                    <li><a href="security/zap/zap-scan-report.html">ZAP Scan Reports</a></li>
                  </ul>
                </div>
              </div>
            </body>
          </html>
          EOL

          # Create diagrams index page
          cat > public/diagrams/index.html <<'EOL'
          <!DOCTYPE html>
          <html>
            <head>
              <title>API Schema Class Diagrams</title>
              <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
              <script>
                mermaid.initialize({ startOnLoad: true });
              </script>
              <style>
                body {
                  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
                  line-height: 1.6;
                  padding: 2rem;
                }
                .diagram {
                  margin: 2rem 0;
                  padding: 1rem;
                  border: 1px solid #eaecef;
                  border-radius: 6px;
                }
              </style>
            </head>
            <body>
              <h1>API Schema Class Diagrams</h1>
              
              <h2>Main API Schema</h2>
              <div id="main-schemas">
                $(for f in public/diagrams/*.mmd; do
                  if [[ ! $f =~ citizen_ ]]; then
                    echo "<div class='diagram'>"
                    echo "<h3>$(basename "$f" .mmd)</h3>"
                    echo "<pre class='mermaid'>"
                    cat "$f"
                    echo "</pre>"
                    echo "</div>"
                  fi
                done)
              </div>

              <h2>Citizen API Schema</h2>
              <div id="citizen-schemas">
                $(for f in public/diagrams/citizen_*.mmd; do
                  echo "<div class='diagram'>"
                  echo "<h3>$(basename "$f" .mmd | sed 's/citizen_//')</h3>"
                  echo "<pre class='mermaid'>"
                  cat "$f"
                  echo "</pre>"
                  echo "</div>"
                done)
              </div>
            </body>
          </html>
          EOL

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4