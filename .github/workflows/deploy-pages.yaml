name: Deploy to GitHub Pages

on:
  workflow_call:
    inputs:
      coverage_artifact:
        description: 'Name of the coverage reports artifact'
        required: true
        type: string
        default: 'coverage-reports'
      api_docs_artifact:
        description: 'Name of the API documentation artifact'
        required: true
        type: string
        default: 'api-docs'
      security_artifact:
        description: 'Name of the security reports artifact'
        required: true
        type: string
        default: 'security-reports'

permissions:
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create public directory
        run: mkdir -p public/diagrams

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install jsonschema jinja2

      - name: Create schema converter script
        run: |
          cat > convert_schema.py <<'EOL'
          import json
          import os
          from pathlib import Path
          from jsonschema import validators
          from typing import Dict, Any, Set, Union, List, Tuple
          from jinja2 import Template 

          def sanitize_name(name: str, prefix: str = '') -> str:
              """Sanitize name for Mermaid compatibility."""
              name = name.replace('-', '_').replace(' ', '_')
              return f"{prefix}_{name}" if prefix else f"model_{name}"

          def get_type_name(type_def: Union[str, list, dict]) -> str:
              """Convert JSON Schema type to Mermaid type."""
              if isinstance(type_def, list):
                  return 'any'
              if isinstance(type_def, dict):
                  return type_def.get('type', 'any')
              return type_def

          def load_all_schemas() -> List[Tuple[str, Dict[str, Any], str]]:
              """Load all schema files with their prefixes."""
              schemas = []
              
              # Load main schemas
              main_dir = Path('zmsentities/schema')
              if main_dir.exists():
                  for file in main_dir.glob('*.json'):
                      with open(file) as f:
                          schemas.append((file.stem, json.load(f), ''))
              
              # Load citizen schemas
              citizen_dir = Path('zmsentities/schema/citizenapi')
              if citizen_dir.exists():
                  for file in citizen_dir.glob('*.json'):
                      with open(file) as f:
                          schemas.append((file.stem, json.load(f), 'citizen'))
              
              return schemas

          def convert_schemas_to_mermaid(schemas: List[Tuple[str, Dict[str, Any], str]]) -> str:
              """Convert all schemas to a single Mermaid diagram."""
              classes = []
              relationships = []
              processed = set()
              schema_classes = {}  # Map schema names to their class names

              def process_schema(schema: Dict[str, Any], class_name: str) -> None:
                  if class_name in processed:
                      return
                  processed.add(class_name)
                  
                  class_def = [f'class {class_name} {{']
                  properties = schema.get('properties', {})
                  required = schema.get('required', [])
                  
                  if not properties:
                      class_def.append('    +any _empty')
                  
                  for prop_name, prop_schema in properties.items():
                      prop_type = get_type_name(prop_schema.get('type', 'any'))
                      is_required = prop_name in required
                      
                      # Check for references to other schemas
                      ref = prop_schema.get('$ref', '')
                      if ref:
                          ref_name = ref.split('/')[-1].replace('.json', '')
                          if ref_name in schema_classes:
                              relationships.append(f'{class_name} --> {schema_classes[ref_name]}')
                              class_def.append(f'    +{schema_classes[ref_name]} {prop_name}{"" if is_required else "?"}')
                              continue
                      
                      if prop_type == 'array':
                          items = prop_schema.get('items', {})
                          item_ref = items.get('$ref', '')
                          if item_ref:
                              ref_name = item_ref.split('/')[-1].replace('.json', '')
                              if ref_name in schema_classes:
                                  relationships.append(f'{class_name} --> "*" {schema_classes[ref_name]}')
                                  class_def.append(f'    +{schema_classes[ref_name]}[] {prop_name}{"" if is_required else "?"}')
                                  continue
                          
                          if items.get('type') == 'object':
                              item_class_name = f'{class_name}_{sanitize_name(prop_name)}_Item'
                              relationships.append(f'{class_name} --> "*" {item_class_name}')
                              process_schema(items, item_class_name)
                              class_def.append(f'    +{item_class_name}[] {prop_name}{"" if is_required else "?"}')
                          else:
                              item_type = get_type_name(items.get('type', 'any'))
                              class_def.append(f'    +{item_type}[] {prop_name}{"" if is_required else "?"}')
                      elif prop_type == 'object':
                          nested_class_name = f'{class_name}_{sanitize_name(prop_name)}'
                          relationships.append(f'{class_name} --> {nested_class_name}')
                          process_schema(prop_schema, nested_class_name)
                          class_def.append(f'    +{nested_class_name} {prop_name}{"" if is_required else "?"}')
                      else:
                          class_def.append(f'    +{prop_type} {prop_name}{"" if is_required else "?"}')
                  
                  class_def.append('}')
                  classes.append('\n'.join(class_def))

              # First pass: collect all schema class names
              for name, schema, prefix in schemas:
                  class_name = sanitize_name(name, prefix)
                  schema_classes[name] = class_name

              # Second pass: process all schemas
              for name, schema, prefix in schemas:
                  class_name = schema_classes[name]
                  process_schema(schema, class_name)

              # Combine all elements
              mermaid = ['classDiagram']
              mermaid.extend(classes)
              mermaid.extend(relationships)
              
              return '\n'.join(mermaid)

          def create_pages(diagrams_dir: Path, mermaid: str) -> None:
              """Create HTML pages with the combined diagram."""
              template = Template("""
          <!DOCTYPE html>
          <html>
            <head>
              <title>API Schema Class Diagrams</title>
              <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
              <script>
                mermaid.initialize({
                  startOnLoad: true,
                  securityLevel: 'loose',
                  logLevel: 'debug',
                  maxTextSize: 900000
                });
              </script>
              <style>
                body {
                  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
                  line-height: 1.6;
                  padding: 2rem;
                  margin: 0;
                  overflow: hidden;
                }
                .diagram-container {
                  position: fixed;
                  top: 4rem;
                  left: 0;
                  right: 0;
                  bottom: 0;
                  overflow: hidden;
                }
                .diagram {
                  position: absolute;
                  top: 0;
                  left: 0;
                  transform-origin: 0 0;
                  cursor: grab;
                }
                .diagram:active {
                  cursor: grabbing;
                }
                .controls {
                  position: fixed;
                  top: 1rem;
                  right: 1rem;
                  background: white;
                  padding: 1rem;
                  border: 1px solid #eaecef;
                  border-radius: 6px;
                  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  z-index: 1000;
                }
                #search {
                  width: 200px;
                  padding: 0.5rem;
                  margin-bottom: 0.5rem;
                }
                #zoom-level {
                  margin-left: 1rem;
                }
              </style>
            </head>
            <body>
              <h1>API Schema Class Diagrams</h1>
              
              <div class="controls">
                <input type="text" id="search" placeholder="Search classes...">
                <button onclick="zoomIn()">Zoom In</button>
                <button onclick="zoomOut()">Zoom Out</button>
                <button onclick="resetZoom()">Reset</button>
                <span id="zoom-level">100%</span>
              </div>
              
              <div class="diagram-container">
                <div class="diagram">
                  <pre class="mermaid">{{ mermaid }}</pre>
                </div>
              </div>

              <script>
                let zoom = 1;
                let offsetX = 0;
                let offsetY = 0;
                let isDragging = false;
                let startX = 0;
                let startY = 0;
                
                const container = document.querySelector('.diagram-container');
                const diagram = document.querySelector('.diagram');
                const zoomLevel = document.getElementById('zoom-level');
                
                function updateTransform() {
                  diagram.style.transform = `translate(${offsetX}px, ${offsetY}px) scale(${zoom})`;
                  zoomLevel.textContent = Math.round(zoom * 100) + '%';
                }
                
                function zoomIn() {
                  zoom *= 1.5;
                  updateTransform();
                }
                
                function zoomOut() {
                  zoom = Math.max(0.1, zoom / 1.5);
                  updateTransform();
                }
                
                function resetZoom() {
                  zoom = 1;
                  offsetX = 0;
                  offsetY = 0;
                  updateTransform();
                }
                
                // Pan support
                diagram.addEventListener('mousedown', (e) => {
                  isDragging = true;
                  startX = e.clientX - offsetX;
                  startY = e.clientY - offsetY;
                  diagram.style.cursor = 'grabbing';
                });
                
                document.addEventListener('mousemove', (e) => {
                  if (!isDragging) return;
                  offsetX = e.clientX - startX;
                  offsetY = e.clientY - startY;
                  updateTransform();
                });
                
                document.addEventListener('mouseup', () => {
                  isDragging = false;
                  diagram.style.cursor = 'grab';
                });
                
                // Zoom with mouse wheel
                container.addEventListener('wheel', (e) => {
                  e.preventDefault();
                  const rect = container.getBoundingClientRect();
                  const x = e.clientX - rect.left;
                  const y = e.clientY - rect.top;
                  
                  // Calculate cursor position relative to diagram
                  const mouseX = (x - offsetX) / zoom;
                  const mouseY = (y - offsetY) / zoom;
                  
                  // Apply zoom
                  if (e.deltaY < 0) {
                    zoom *= 1.1;
                  } else {
                    zoom = Math.max(0.1, zoom / 1.1);
                  }
                  
                  // Adjust offset to keep mouse position fixed
                  offsetX = x - mouseX * zoom;
                  offsetY = y - mouseY * zoom;
                  
                  updateTransform();
                });
                
                document.getElementById('search').addEventListener('input', (e) => {
                  const text = e.target.value.toLowerCase();
                  const svgText = document.querySelectorAll('text');
                  svgText.forEach(t => {
                    if (t.textContent.toLowerCase().includes(text)) {
                      t.style.fill = 'red';
                    } else {
                      t.style.fill = '';
                    }
                  });
                });
              </script>
            </body>
          </html>
          """)
              
              # Write index page
              diagrams_dir.joinpath('index.html').write_text(
                  template.render(mermaid=mermaid)
              )

          if __name__ == '__main__':
              print("Starting schema conversion...")
              diagrams_dir = Path('public/diagrams')
              diagrams_dir.mkdir(parents=True, exist_ok=True)
              
              # Load and process all schemas
              schemas = load_all_schemas()
              mermaid = convert_schemas_to_mermaid(schemas)
              
              # Save combined diagram
              diagrams_dir.joinpath('combined.mmd').write_text(mermaid)
              
              # Create HTML pages
              create_pages(diagrams_dir, mermaid)
              print("Schema conversion complete")
          EOL

      - name: Generate schema diagrams and pages
        run: python convert_schema.py

      - name: Create index page
        run: |
          cat > public/index.html <<'EOL'
          <!DOCTYPE html>
          <html>
            <head>
              <title>eAppointment Documentation</title>
              <style>
                :root {
                  --primary: #0366d6;
                  --bg: #ffffff;
                  --text: #24292e;
                }
                body {
                  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
                  line-height: 1.6;
                  color: var(--text);
                  max-width: 1200px;
                  margin: 0 auto;
                  padding: 2rem;
                  background: var(--bg);
                }
                h1, h2 {
                  border-bottom: 1px solid #eaecef;
                  padding-bottom: 0.3em;
                }
                .grid {
                  display: grid;
                  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                  gap: 2rem;
                  margin: 2rem 0;
                }
                .card {
                  background: #f6f8fa;
                  border-radius: 6px;
                  padding: 1.5rem;
                }
                .card h2 {
                  margin-top: 0;
                }
                ul {
                  list-style-type: none;
                  padding: 0;
                }
                li {
                  margin: 0.5rem 0;
                }
                a {
                  color: var(--primary);
                  text-decoration: none;
                }
                a:hover {
                  text-decoration: underline;
                }
              </style>
            </head>
            <body>
              <h1>ZMS eAppointment Technical Documentation</h1>
              
              <div class="grid">
                <div class="card">
                  <h2>API Documentation</h2>
                  <ul>
                    <li><a href="https://it-at-m.github.io/eappointment/zmscitizenapi/public/doc/index.html">Zmscitizenapi API Documentation</a></li>
                    <li><a href="https://it-at-m.github.io/eappointment/zmsapi/public/doc/index.html">Zmsapi Documentation</a></li>
                  </ul>
                </div>

                <div class="card">
                  <h2>Schema Diagrams</h2>
                  <ul>
                    <li><a href="diagrams/index.html">API Schema Class Diagrams</a></li>
                  </ul>
                </div>

                <div class="card">
                  <h2>Code Test Coverage Reports</h2>
                  <ul>
                    <li><a href="coverage/coverage-zmsadmin/html/">Zmsadmin Coverage</a></li>
                    <li><a href="coverage/coverage-zmscalldisplay/html/">Zmscalldisplay Coverage</a></li>
                    <li><a href="coverage/coverage-zmscitizenapi/html/">Zmscitizenapi Coverage</a></li>
                    <li><a href="coverage/coverage-zmsdldb/html/">Zmsdldb Coverage</a></li>
                    <li><a href="coverage/coverage-zmsentities/html/">Zmsentities Coverage</a></li>
                    <li><a href="coverage/coverage-zmsmessaging/html/">Zmsmessaging Coverage</a></li>
                    <li><a href="coverage/coverage-zmsslim/html/">Zmsslim Coverage</a></li>
                    <li><a href="coverage/coverage-zmsstatistic/html/">Zmsstatistic Coverage</a></li>
                    <li><a href="coverage/coverage-zmsticketprinter/html/">Zmsticketprinter Coverage</a></li>
                    <li><a href="coverage/coverage-zmsapi/html/">Zmsapi Coverage</a></li>
                    <li><a href="coverage/coverage-zmsdb/html/">Zmsdb Coverage</a></li>
                    <li><a href="coverage/coverage-zmsclient/html/">Zmsclient Coverage</a></li>
                  </ul>
                </div>

                <div class="card">
                  <h2>OWASP Security Reports</h2>
                  <ul>
                    <li><a href="security/security-report-zmsadmin/dependency-check-report.html">Zmsadmin Security Report</a></li>
                    <li><a href="security/security-report-zmscalldisplay/dependency-check-report.html">Zmscalldisplay Security Report</a></li>
                    <li><a href="security/security-report-zmscitizenapi/dependency-check-report.html">Zmscitizenapi Security Report</a></li>
                    <li><a href="security/security-report-zmsdldb/dependency-check-report.html">Zmsdldb Security Report</a></li>
                    <li><a href="security/security-report-zmsentities/dependency-check-report.html">Zmsentities Security Report</a></li>
                    <li><a href="security/security-report-zmsmessaging/dependency-check-report.html">Zmsmessaging Security Report</a></li>
                    <li><a href="security/security-report-zmsslim/dependency-check-report.html">Zmsslim Security Report</a></li>
                    <li><a href="security/security-report-zmsstatistic/dependency-check-report.html">Zmsstatistic Security Report</a></li>
                    <li><a href="security/security-report-zmsticketprinter/dependency-check-report.html">Zmsticketprinter Security Report</a></li>
                    <li><a href="security/security-report-zmsapi/dependency-check-report.html">Zmsapi Security Report</a></li>
                    <li><a href="security/security-report-zmsdb/dependency-check-report.html">Zmsdb Security Report</a></li>
                    <li><a href="security/security-report-zmsclient/dependency-check-report.html">Zmsclient Security Report</a></li>
                    <li><a href="security/zap/zap-scan-report.html">ZAP Scan Reports</a></li>
                  </ul>
                </div>
              </div>
            </body>
          </html>
          EOL

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.coverage_artifact }}
          path: public

      - name: Download API docs
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.api_docs_artifact }}
          path: public

      - name: Download security reports
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.security_artifact }}
          path: public

      - name: Debug - List directory structure
        run: |
          echo "=== Directory Structure ==="
          ls -R public/

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4