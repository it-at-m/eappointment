name: Prune Untagged Packages

on:
  schedule:
    # Run every Sunday at 3 AM UTC (after workflow runs cleanup)
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      days_to_keep:
        description: 'Number of days to keep untagged packages (default: 7)'
        required: false
        default: '7'
        type: string
      dry_run:
        description: 'Dry run mode - show what would be pruned without actually pruning'
        required: false
        default: 'false'
        type: boolean

permissions:
  packages: write
  contents: read

jobs:
  prune-untagged-packages:
    runs-on: ubuntu-latest
    steps:
      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Prune untagged packages
        run: |
          # Configuration
          DAYS_TO_KEEP=${{ github.event.inputs.days_to_keep || 7 }}
          DRY_RUN=${{ github.event.inputs.dry_run || 'false' }}
          CUTOFF_DATE=$(date -d "$DAYS_TO_KEEP days ago" -u +"%Y-%m-%dT%H:%M:%SZ")
          
          echo "=== Package Cleanup ==="
          echo "Retention period: $DAYS_TO_KEEP days"
          echo "Cutoff date: $CUTOFF_DATE"
          echo "Dry run mode: $DRY_RUN"
          echo "Current date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo ""
          
          # List of packages to clean up
          PACKAGES=(
            "zmsmessaging"
            "zmsapi" 
            "zmscalldisplay"
            "zmsadmin"
            "zmsstatistic"
            "zmsticketprinter"
            "zmscitizenapi"
            "zmscitizenview"
          )
          
          TOTAL_DELETED=0
          MAX_DELETIONS=200  # Rate limit safety
          
          for PACKAGE in "${PACKAGES[@]}"; do
            echo "=== Processing package: $PACKAGE ==="
            
            # Get untagged package versions older than cutoff date
            OLD_VERSIONS=$(gh api "orgs/it-at-m/packages/container/eappointment%2F$PACKAGE/versions" \
              --jq --arg cutoff "$CUTOFF_DATE" '
                [.[] | 
                  select(
                    .metadata.container.tags | length == 0 and 
                    .updated_at < $cutoff
                  )
                ] | .[].id')
            
            VERSION_COUNT=$(echo "$OLD_VERSIONS" | wc -l)
            echo "Found $VERSION_COUNT untagged versions older than $DAYS_TO_KEEP days"
            
            if [ "$VERSION_COUNT" -eq 0 ]; then
              echo "No old untagged versions found for $PACKAGE"
              continue
            fi
            
            # Show sample versions to be deleted
            echo "Sample versions to delete:"
            gh api "orgs/it-at-m/packages/container/eappointment%2F$PACKAGE/versions" \
              --jq --arg cutoff "$CUTOFF_DATE" '
                [.[] | 
                  select(
                    .metadata.container.tags | length == 0 and 
                    .updated_at < $cutoff
                  )
                ] | .[0:5] | .[] | "  - \(.id) (\(.updated_at))"' || echo "  (No versions to show)"
            
            if [ "$DRY_RUN" = "true" ]; then
              echo "DRY RUN: Would delete $VERSION_COUNT versions of $PACKAGE"
              TOTAL_DELETED=$((TOTAL_DELETED + VERSION_COUNT))
              continue
            fi
            
            # Delete versions one by one with rate limiting
            DELETED_IN_PACKAGE=0
            echo "$OLD_VERSIONS" | while read -r version_id; do
              if [ -n "$version_id" ]; then
                echo "Deleting version: $version_id"
                if gh api -X DELETE "orgs/it-at-m/packages/container/eappointment%2F$PACKAGE/versions/$version_id"; then
                  echo "Successfully deleted version: $version_id"
                  DELETED_IN_PACKAGE=$((DELETED_IN_PACKAGE + 1))
                  
                  # Check rate limit
                  if [ $DELETED_IN_PACKAGE -ge $MAX_DELETIONS ]; then
                    echo "Reached rate limit. Stopping package cleanup."
                    break
                  fi
                else
                  echo "Failed to delete version: $version_id"
                fi
                
                # Rate limiting delay
                sleep 2
              fi
            done
            
            echo "Completed cleanup for $PACKAGE"
            echo ""
            
            # Delay between packages
            sleep 5
          done
          
          if [ "$DRY_RUN" = "true" ]; then
            echo "DRY RUN COMPLETED: Would have deleted $TOTAL_DELETED untagged package versions"
          else
            echo "Package cleanup completed. Total versions deleted: $TOTAL_DELETED"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "=== Cleanup Summary ==="
          echo "Untagged package cleanup completed."
          echo "Check the logs above for details on what was deleted."
          echo ""
          echo "Remaining packages:"
          gh api "orgs/it-at-m/packages" --jq '.[] | select(.name | contains("eappointment")) | "\(.name): \(.package_type)"'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
