reviews:
  review_status: true
  auto_review:
    enabled: true
    base_branches:
      - next
    drafts: true
  path_instructions:
    - path: "**/*"
      instructions: |
        Apply the following Clean Code guidelines to all files, as summarized by [wojteklu's Clean Code gist](https://gist.githubusercontent.com/wojteklu/73c6914cc446146b8b533c0988cf8d29/raw/c7a44d774fc3b09a0d5f0f58888550ba0ac694b9/clean_code.md):

        Code is clean if it can be understood easily â€“ by everyone on the team. Clean code can be read and enhanced by a developer other than its original author. With understandability comes readability, changeability, extensibility and maintainability.

        ## General rules
        1. Follow standard conventions.
        2. Keep it simple stupid. Simpler is always better. Reduce complexity as much as possible.
        3. Boy scout rule. Leave the campground cleaner than you found it.
        4. Always find root cause. Always look for the root cause of a problem.

        ## Design rules
        1. Keep configurable data at high levels.
        2. Prefer polymorphism to if/else or switch/case.
        3. Separate multi-threading code.
        4. Prevent over-configurability.
        5. Use dependency injection.
        6. Follow Law of Demeter. A class should know only its direct dependencies.

        ## Understandability tips
        1. Be consistent. If you do something a certain way, do all similar things in the same way.
        2. Use explanatory variables.
        3. Encapsulate boundary conditions. Boundary conditions are hard to keep track of. Put the processing for them in one place.
        4. Prefer dedicated value objects to primitive type.
        5. Avoid logical dependency. Don't write methods which works correctly depending on something else in the same class.
        6. Avoid negative conditionals.

        ## Names rules
        1. Choose descriptive and unambiguous names.
        2. Make meaningful distinction.
        3. Use pronounceable names.
        4. Use searchable names.
        5. Replace magic numbers with named constants.
        6. Avoid encodings. Don't append prefixes or type information.

        ## Functions rules
        1. Small.
        2. Do one thing.
        3. Use descriptive names.
        4. Prefer fewer arguments.
        5. Have no side effects.
        6. Don't use flag arguments. Split method into several independent methods that can be called from the client without the flag.

        ## Comments rules
        1. Always try to explain yourself in code.
        2. Don't be redundant.
        3. Don't add obvious noise.
        4. Don't use closing brace comments.
        5. Don't comment out code. Just remove.
        6. Use as explanation of intent.
        7. Use as clarification of code.
        8. Use as warning of consequences.

        ## Source code structure
        1. Separate concepts vertically.
        2. Related code should appear vertically dense.
        3. Declare variables close to their usage.
        4. Dependent functions should be close.
        5. Similar functions should be close.
        6. Place functions in the downward direction.
        7. Keep lines short.
        8. Don't use horizontal alignment.
        9. Use white space to associate related things and disassociate weakly related.
        10. Don't break indentation.

        ## Objects and data structures
        1. Hide internal structure.
        2. Prefer data structures.
        3. Avoid hybrids structures (half object and half data).
        4. Should be small.
        5. Do one thing.
        6. Small number of instance variables.
        7. Base class should know nothing about their derivatives.
        8. Better to have many functions than to pass some code into a function to select a behavior.
        9. Prefer non-static methods to static methods.

        ## Tests
        1. One assert per test.
        2. Readable.
        3. Fast.
        4. Independent.
        5. Repeatable.

        ## Code smells
        1. Rigidity. The software is difficult to change. A small change causes a cascade of subsequent changes.
        2. Fragility. The software breaks in many places due to a single change.
        3. Immobility. You cannot reuse parts of the code in other projects because of involved risks and high effort.
        4. Needless Complexity.
        5. Needless Repetition.
        6. Opacity. The code is hard to understand.

    - path: "**/*.php"
      instructions: |
        Flag any usage of error_log() as it should be replaced with proper Monolog logging mechanisms provided by [zmsslim](https://github.com/it-at-m/eappointment/blob/b52b5d59c5013615d7fbfeaf595f3fdc047017d1/zmsslim/src/Slim/Bootstrap.php#L76) which should be setup in the App/Application of each module:
        1. For error handling: Use the proper Monolog logging framework with error levels
        2. For application info logs: Use the proper Monolog logging framework with info levels
        3. For debugging: Use a dedicated debug logger or remove debug statements
        4. For CLI output: Use a CLI output handler or symfony/console
        5. The application [log levels](https://github.com/it-at-m/eappointment/blob/b52b5d59c5013615d7fbfeaf595f3fdc047017d1/zmsslim/src/Slim/Bootstrap.php#L60) are as follows DEBUG, INFO, NOTICE, WARNING, ERROR, CRITICAL, ALERT, and EMERGENCY

        Example replacement:
        ```php
        // Instead of:
        error_log("Import failed - " . $e->getMessage());
        
        // Use:
        $log->error("Import failed", ['error' => $e->getMessage()]);
        ```

        Flag specific logging violations:
        1. error_log(), var_dump(), print_r(), die(), exit() usage (except proper error logging in catch blocks)
        2. Any debug output that should use proper Monolog logging
        3. Debug constants like DEBUG = true
        4. Debug logging that should be removed in production
        5. Commented debug code that should be cleaned up

        Example replacements:
        ```php
        // Instead of:
        error_log("Error occurred");
        var_dump($data);
        die('debug point');
        
        // Use:
        $log->error("Error occurred", ['context' => 'processing']);
        $log->debug('Data dump', ['data' => $data]);
        // Remove die() statements entirely
        ```

        Exception handling should use proper logging:
        ```php
        // Instead of:
        try {
            $result = $this->process();
        } catch (Exception $e) {
            error_log("Processing failed: " . $e->getMessage());
        }
        
        // Use:
        try {
            $result = $this->process();
        } catch (Exception $e) {
            $log->error("Processing failed", ['error' => $e->getMessage(), 'trace' => $e->getTraceAsString()]);
        }
        ```

        Use appropriate log levels:
        ```php
        // Instead of:
        error_log("User logged in");
        error_log("Processing data...");
        
        // Use:
        $log->info("User logged in", ['user_id' => $userId, 'ip' => $ipAddress]);
        $log->debug("Processing data", ['data_size' => count($data), 'processor' => 'batch']);
        ```
        Use appropriate log levels:
        ```php
        // Instead of:
        var_dump($data);
        die('debug point');
        
        // Use:
        $log->debug('Data dump', ['data' => $data]);
        // Remove debug statements entirely
        ```

        Flag TODO/FIXME comments that indicate technical debt:
        1. TODO comments without clear action items
        2. FIXME comments indicating broken functionality
        3. HACK comments indicating temporary workarounds
        4. XXX comments indicating problematic code

        These should be converted to proper issues or addressed:
        ```php
        // Instead of:
        // TODO: fix this later
        // FIXME: this is broken
        
        // Use:
        // Create proper issue and reference it
        // @see Issue #123: Refactor validation logic
        ```

        Flag @SuppressWarnings annotations that may indicate code quality issues:
        1. Excessive use of @SuppressWarnings
        2. Suppressing warnings without proper justification
        3. Suppressing warnings that could be fixed with refactoring

        Consider refactoring instead of suppressing:
        ```php
        // Instead of:
        /**
         * @SuppressWarnings(Complexity)
         */
        public function complexMethod() { /* 200 lines */ }
        
        // Use:
        // Break down into smaller, focused methods
        public function processData() {
            $this->validateInput();
            $this->transformData();
            $this->saveResults();
        }
        ```

        Flag potential security vulnerabilities:
        1. Hardcoded passwords, secrets, or API keys
        2. Use of dangerous functions: eval(), exec(), system(), shell_exec()
        3. Dynamic includes/requires with user input
        4. SQL injection vulnerabilities (direct variable interpolation)
        5. XSS vulnerabilities (unfiltered output)

        Example fixes:
        ```php
        // Instead of:
        eval($userInput);
        include($_GET['file']);
        
        // Use:
        // Avoid eval() entirely
        // Use whitelist validation for includes
        $allowedFiles = ['config.php', 'template.php'];
        if (in_array($file, $allowedFiles)) {
            include($file);
        }
        ```

        Flag database security issues:
        1. Direct variable interpolation in SQL queries
        2. Missing parameter binding
        3. Use of deprecated mysql_* functions
        4. Unfiltered user input in database operations

        Example fixes:
        ```php
        // Instead of:
        $query = "SELECT * FROM users WHERE id = $userId";
        
        // Use:
        $query = "SELECT * FROM users WHERE id = ?";
        $stmt->bind_param('i', $userId);
        ```

        Flag code complexity issues:
        1. Methods longer than 50 lines
        2. Classes with too many responsibilities
        3. Deep nesting (more than 3 levels)
        4. Cyclomatic complexity > 10
        5. Missing type hints and return types

        Consider refactoring:
        ```php
        // Instead of:
        public function processEverything($data) {
            // 100+ lines of mixed logic
        }
        
        // Use:
        public function processData(array $data): Result {
            $this->validate($data);
            $transformed = $this->transform($data);
            return $this->save($transformed);
        }
        ```

        Flag configuration and environment issues:
        1. Hardcoded configuration values
        2. Missing environment variable checks
        3. Debug settings enabled in production code
        4. Inconsistent configuration patterns

        Example fixes:
        ```php
        // Instead of:
        const DEBUG = true;
        const DB_PASSWORD = 'hardcoded_password';
        
        // Use:
        const DEBUG = getenv('APP_DEBUG') === 'true';
        const DB_PASSWORD = getenv('DB_PASSWORD') ?: throw new Exception('DB_PASSWORD not set');
        ```

        Flag poor error handling:
        1. Empty catch blocks
        2. Generic exception catching
        3. Missing error logging
        4. Silent failures
        5. Inconsistent error response formats

        Example improvements:
        ```php
        // Instead of:
        try {
            $result = $this->process();
        } catch (Exception $e) {
            // Empty catch block
        }
        
        // Use:
        try {
            $result = $this->process();
        } catch (SpecificException $e) {
            $log->error('Processing failed', ['error' => $e->getMessage()]);
            throw new ProcessException('Failed to process data', 0, $e);
        }
        ```

        Flag performance issues:
        1. N+1 query problems
        2. Unnecessary database queries in loops
        3. Large data processing without pagination
        4. Missing caching opportunities
        5. Inefficient string concatenation in loops

        Example fixes:
        ```php
        // Instead of:
        foreach ($users as $user) {
            $profile = $this->getUserProfile($user->id); // N+1 query
        }
        
        // Use:
        $userIds = array_column($users, 'id');
        $profiles = $this->getUserProfiles($userIds); // Single query
        ```

        Flag deprecated/legacy code usage:
        1. Any usage of @deprecated methods, classes, or properties
        2. Calls to deprecated functions (look for @deprecated in docblocks or comments)
        3. Encourage migration to newer APIs or patterns

        Example:
        ```php
        // Instead of:
        /** @deprecated Use newMethod() instead */
        public function oldMethod() {}
        $this->oldMethod();
        // Use:
        $this->newMethod();
        ```

        Flag excessive function parameters:
        1. Functions/methods with more than 4-5 parameters (especially if many are optional)
        2. Suggest refactoring to use objects or associative arrays for complex parameter sets

        Example:
        ```php
        // Instead of:
        public function foo($a, $b, $c, $d, $e, $f) {}
        // Use:
        public function foo(FooOptions $options) {}
        ```

        Flag global/static state:
        1. Use of global variables
        2. Excessive use of static properties (except for constants)
        3. Encourage dependency injection or instance-based design

        Example:
        ```php
        // Instead of:
        global $myVar;
        // Use:
        $this->myVar;
        ```

        Flag anonymous functions in loops:
        1. Creation of closures inside loops (foreach, for, while)
        2. Suggest moving closure definition outside the loop

        Example:
        ```php
        // Instead of:
        foreach ($items as $item) {
            $callback = function($x) { return $x * 2; };
            $result[] = $callback($item);
        }
        // Use:
        $callback = function($x) { return $x * 2; };
        foreach ($items as $item) {
            $result[] = $callback($item);
        }
        ```

        Flag unnecessary type casting:
        1. Unnecessary or redundant type casts (e.g., (int)(int)$x)
        2. Type casts that can be avoided by using proper types

        Example:
        ```php
        // Instead of:
        $x = (int)(int)$y;
        // Use:
        $x = (int)$y;
        ```

        Flag unoptimized loops:
        1. Nested loops with potential for O(n^2) or worse complexity, especially if not commented
        2. Loops that can be replaced with built-in functions or more efficient algorithms

        Example:
        ```php
        // Instead of:
        foreach ($a as $x) {
            foreach ($b as $y) {
                if ($x === $y) { ... }
            }
        }
        // Use:
        $bSet = array_flip($b);
        foreach ($a as $x) {
            if (isset($bSet[$x])) { ... }
        }
        ```

    - path: "**/*.{js,jsx,ts,tsx}"
      instructions: |
        Flag any usage of console.log() as it should be replaced with proper logging or removed:
        1. For development: console.debug()
        2. For production: Remove console.log() statements or use structured logging
        3. For errors: Use error console.error()

        Example replacement:
        ```javascript
        // Instead of:
        console.log('User data:', userData);
        
        // Use:
        console.debug('Processing user data', { userData });
        // or for development only:
        Remove the console.log entirely
        ```

        Flag specific logging violations:
        1. console.log(), console.debug(), console.warn() usage (except console.error in catch blocks)
        2. Any debug output that should use proper logging frameworks

        Example replacements:
        ```javascript
        // Instead of:
        console.log('User data:', userData);
        console.debug('Processing...');
        
        // Use:
        // Remove console.log entirely or use proper logging
        // Only console.error in catch blocks is acceptable
        try {
          processData(userData);
        } catch (error) {
          console.error('Processing failed:', error);
        }
        ```

        Flag JavaScript security and UX issues:
        1. alert(), confirm(), prompt() usage (poor UX)
        2. eval() usage (security risk)
        3. innerHTML with user input (XSS risk)
        4. Unfiltered user input in DOM manipulation

        Example replacements:
        ```javascript
        // Instead of:
        alert('Error occurred');
        eval(userInput);
        
        // Use:
        // Use proper error handling and UI components
        this.showErrorNotification('Error occurred');
        // Avoid eval() entirely
        ```

        Flag TODO/FIXME comments that indicate technical debt:
        1. TODO comments without clear action items
        2. FIXME comments indicating broken functionality
        3. HACK comments indicating temporary workarounds
        4. XXX comments indicating problematic code

        These should be converted to proper issues or addressed:
        ```javascript
        // Instead of:
        // TODO: fix this later
        // FIXME: this is broken
        
        // Use:
        // Create proper issue and reference it
        // @see Issue #123: Refactor validation logic
        ```

        Flag code complexity issues:
        1. Functions longer than 50 lines
        2. Deep nesting (more than 3 levels)
        3. Cyclomatic complexity > 10
        4. Missing type annotations (TypeScript)
        5. Inconsistent error handling

        Consider refactoring:
        ```javascript
        // Instead of:
        function processEverything(data) {
            // 100+ lines of mixed logic
        }
        
        // Use:
        function processData(data: UserData): Result {
            validateInput(data);
            const transformed = transformData(data);
            return saveResults(transformed);
        }
        ```

        Flag performance issues:
        1. Unnecessary DOM queries in loops
        2. Missing debouncing for frequent events
        3. Large data processing without pagination
        4. Memory leaks from event listeners
        5. Inefficient array operations

        Example fixes:
        ```javascript
        // Instead of:
        items.forEach(item => {
            document.querySelector(`#item-${item.id}`).textContent = item.name;
        });
        
        // Use:
        const container = document.querySelector('#items-container');
        items.forEach(item => {
            container.querySelector(`#item-${item.id}`).textContent = item.name;
        });
        ```

        Flag deprecated/legacy code usage:
        1. Any usage of deprecated APIs or methods (look for @deprecated in docblocks or comments)
        2. Calls to deprecated functions
        3. Encourage migration to newer APIs or patterns

        Flag excessive function parameters:
        1. Functions with more than 4-5 parameters (especially if many are optional)
        2. Suggest refactoring to use objects or destructured options

        Flag global/static state:
        1. Use of global variables (window, global, etc.)
        2. Excessive use of static properties
        3. Encourage module or instance-based design

        Flag anonymous functions in loops:
        1. Creation of closures inside loops (forEach, for, while)
        2. Suggest moving closure definition outside the loop

        Flag unnecessary type casting:
        1. Unnecessary or redundant type casts (e.g., Number(Number(x)), String(String(y)))
        2. Type casts that can be avoided by using proper types

        Flag unoptimized loops:
        1. Nested loops with potential for O(n^2) or worse complexity, especially if not commented
        2. Loops that can be replaced with built-in functions or more efficient algorithms
