#!/usr/bin/env php
<?php
/**
 * Download and validate json files and handle backups if changes are detected.
 */
require 'vendor/autoload.php';

use Garden\Cli\Cli;
use Httpful\Request;

$cli = new Cli();
$cli->description("Downloads json files from the official site, validates them, replaces the old files, and handles backups if changes are detected.")
    ->opt('output:o', 'Path to save files', true)
    ->opt('proxy:p', 'Proxy server like "proxy:3128"', false)
    ->opt('base:b', 'Base download url', true);
$args = $cli->parse($argv, true);

$destinationPath = $args->getOpt('output');
$currentPath = $destinationPath . '/current';
$backupPath = $destinationPath . '/backups';

if (!is_dir($currentPath) && !mkdir($currentPath, 0777, true) && !is_dir($currentPath)) {
    echo $cli->red("Failed to create the current directory at $currentPath\n");
    exit(1);
}

$baseDomain = $args->getOpt('base');
$proxy = $args->getOpt('proxy') ?: getenv('HTTP_PROXY');
$client = Request::init()->withoutAutoParsing()->followRedirects()->timeout(30);

if ($proxy) {
    $client->useProxy($proxy);
}

Request::ini($client);

$downloads = [
    [
        'url' => '/export/standorte/json/',
        'file' => 'locations_de.json',
    ],
    [
        'url' => '/export/standorte/json/en/',
        'file' => 'locations_en.json',
    ],
    [
        'url' => '/export/dienstleistungen/json/',
        'file' => 'services_de.json',
    ],
    [
        'url' => '/export/dienstleistungen/json/en/',
        'file' => 'services_en.json',
    ],
    [
        'url' => '/export/themen/json/',
        'file' => 'topic_de.json',
    ],
    [
        'url' => '/export/behoerden/json/',
        'file' => 'authority_de.json',
    ],
    [
        'url' => '/export/settings/json/',
        'file' => 'settings.json',
    ],
];

// Backup logic
$backupRequired = false;
foreach ($downloads as $download) {
    $currentFile = $currentPath . '/' . $download['file'];
    $newContent = file_get_contents($baseDomain . $download['url']);
    
    if (file_exists($currentFile) && md5_file($currentFile) !== md5($newContent)) {
        $backupRequired = true;
        break;
    }
}

// Perform backup if necessary
if ($backupRequired) {
    $timestamp = date('Y-m-d');
    $backupDir = $backupPath . '/' . $timestamp;
    
    if (!mkdir($backupDir, 0777, true) && !is_dir($backupDir)) {
        echo $cli->red("Failed to create backup directory at $backupDir\n");
        exit(1);
    }
    
    // Copy current files to backup instead of moving them
    foreach (glob($currentPath . '/*.json') as $file) {
        if (!copy($file, $backupDir . '/' . basename($file))) {
            echo $cli->red("Failed to backup $file\n");
        }
    }
}


// Download overwrites files in current directory and validate new files
foreach ($downloads as $download) {
    $destFile = $currentPath . '/' . $download['file'];
    $request = Request::get($baseDomain . $download['url'])->send();
    
    if ($request->code !== 200 || (isset($request->body->error) && $request->body->error)) {
        echo $cli->red("Failed to download or validate {$download['file']}\n");
        continue;
    }
    
    file_put_contents($destFile, $request->raw_body);
}

echo "Downloads and backups (if necessary) completed.\n";
